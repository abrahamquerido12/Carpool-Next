// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String

  isUserTypeSelected Boolean  @default(false)
  isDriver           Boolean?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  profile   Profile?
  driver    Driver?
  Passenger Passenger?
}

model Profile {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  firstName      String
  firstLastName  String
  secondLastName String
  phoneNumber    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Driver {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  car Car?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trips     Trip[]

  weeklyTrips WeeklyTrip[]
}

model WeeklyTrip {
  id Int @id @default(autoincrement())

  driver   Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)
  driverId Int

  dayOfWeek DayOfWeek

  origin            String
  originCoordinates String

  destination            String
  destinationCoordinates String

  departureTime DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  trips      Trip[]
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model PassengerTrip {
  id Int @id @default(autoincrement())

  passenger   Passenger @relation(fields: [passengerId], references: [id], onDelete: Cascade)
  passengerId Int  @unique

  trip   Trip @relation(fields: [tripId], references: [id])
  tripId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}

model Passenger {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  trips       PassengerTrip[]
  
  TripRequest TripRequest[]
}

model Car {
  id Int @id @default(autoincrement())

  driver   Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)
  driverId Int    @unique

  brand String
  model String
  color String
  plate String
  seats Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trip {
  id Int @id @default(autoincrement())

  driver   Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)
  driverId Int

  // up to no. of seats in car passenger can be added
  // passengers Passenger[]

  passengers PassengerTrip[]




  date        DateTime
  isRecurrent Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  TripRequest TripRequest[]

  

  // Clave for√°nea que hace referencia a WeeklyTrip
  weeklyTrip   WeeklyTrip @relation(fields: [weeklyTripId], references: [id])
  weeklyTripId Int

  status TripStatus
}

enum TripStatus {
  PENDING
  IN_PROGRESS
  FINISHED
}

model TripRequest {
  id Int @id @default(autoincrement())

  passenger   Passenger @relation(fields: [passengerId], references: [id], onDelete: Cascade)
  passengerId Int

  trip   Trip @relation(fields: [tripId], references: [id])
  tripId Int

  distanceToOrigin Int?
  distanceToDestination Int?
  
  searchedOrigin String?
  searchedOriginCoordinates String?

  searchedDestination String?
  searchedDestinationCoordinates String?

  searchedDateTime DateTime?

  status TripRequestStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TripRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}
